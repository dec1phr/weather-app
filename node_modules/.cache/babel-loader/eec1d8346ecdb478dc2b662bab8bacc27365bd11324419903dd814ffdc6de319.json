{"ast":null,"code":"var _jsxFileName = \"/home/decyphr/weather-monitoring-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst App = () => {\n  _s();\n  const [city, setCity] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecastData, setForecastData] = useState([]);\n  const [error, setError] = useState('');\n  const apiKey = 'YOUR_WEATHERAPI_KEY'; // Use your weatherapi.com API key here\n\n  // Fetch Current Weather Data\n  const fetchWeatherData = async () => {\n    try {\n      setError('');\n      if (!city) {\n        setError('Please enter a city name.');\n        return;\n      }\n      const weatherUrl = `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;\n      const weatherResponse = await fetch(weatherUrl);\n      const weatherData = await weatherResponse.json();\n      if (weatherData.error) {\n        setError('City not found. Please try again.');\n        return;\n      }\n      setCurrentWeather(weatherData);\n      fetchForecastData();\n    } catch (error) {\n      setError('Failed to fetch weather data. Please try again later.');\n      console.error(error);\n    }\n  };\n\n  // Fetch Forecast Data\n  const fetchForecastData = async () => {\n    try {\n      const forecastUrl = `http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=7`;\n      const forecastResponse = await fetch(forecastUrl);\n      const forecastData = await forecastResponse.json();\n      if (forecastData.error) {\n        setError('Forecast data not found. Please try again.');\n        return;\n      }\n      setForecastData(forecastData.forecast.forecastday);\n    } catch (error) {\n      setError('Failed to fetch forecast data. Please try again later.');\n      console.error(error);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    fetchWeatherData();\n  };\n  const getChartData = () => {\n    const dates = forecastData.map(day => day.date);\n    const temperatures = forecastData.map(day => day.day.avgtemp_c);\n    return {\n      labels: dates,\n      datasets: [{\n        label: 'Temperature (°C)',\n        data: temperatures,\n        fill: false,\n        borderColor: 'rgba(75,192,192,1)',\n        tension: 0.1\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Weather Monitoring App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city\",\n        value: city,\n        onChange: e => setCity(e.target.value),\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentWeather.location.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", currentWeather.current.temp_c, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Weather: \", currentWeather.current.condition.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), forecastData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"7-Day Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: getChartData()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"egBN9o2KupzjOcLmqvWwchYmk5o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","App","_s","city","setCity","currentWeather","setCurrentWeather","forecastData","setForecastData","error","setError","apiKey","fetchWeatherData","weatherUrl","weatherResponse","fetch","weatherData","json","fetchForecastData","console","forecastUrl","forecastResponse","forecast","forecastday","handleSubmit","event","preventDefault","getChartData","dates","map","day","date","temperatures","avgtemp_c","labels","datasets","label","data","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","e","target","location","name","current","temp_c","condition","text","length","_c","$RefreshReg$"],"sources":["/home/decyphr/weather-monitoring-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst App = () => {\n  const [city, setCity] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecastData, setForecastData] = useState([]);\n  const [error, setError] = useState('');\n  \n  const apiKey = 'YOUR_WEATHERAPI_KEY'; // Use your weatherapi.com API key here\n\n  // Fetch Current Weather Data\n  const fetchWeatherData = async () => {\n    try {\n      setError('');\n      if (!city) {\n        setError('Please enter a city name.');\n        return;\n      }\n\n      const weatherUrl = `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;\n      const weatherResponse = await fetch(weatherUrl);\n      const weatherData = await weatherResponse.json();\n\n      if (weatherData.error) {\n        setError('City not found. Please try again.');\n        return;\n      }\n\n      setCurrentWeather(weatherData);\n      fetchForecastData();\n    } catch (error) {\n      setError('Failed to fetch weather data. Please try again later.');\n      console.error(error);\n    }\n  };\n\n  // Fetch Forecast Data\n  const fetchForecastData = async () => {\n    try {\n      const forecastUrl = `http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=7`;\n      const forecastResponse = await fetch(forecastUrl);\n      const forecastData = await forecastResponse.json();\n\n      if (forecastData.error) {\n        setError('Forecast data not found. Please try again.');\n        return;\n      }\n\n      setForecastData(forecastData.forecast.forecastday);\n    } catch (error) {\n      setError('Failed to fetch forecast data. Please try again later.');\n      console.error(error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    fetchWeatherData();\n  };\n\n  const getChartData = () => {\n    const dates = forecastData.map((day) => day.date);\n    const temperatures = forecastData.map((day) => day.day.avgtemp_c);\n\n    return {\n      labels: dates,\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: temperatures,\n          fill: false,\n          borderColor: 'rgba(75,192,192,1)',\n          tension: 0.1,\n        },\n      ],\n    };\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app-title\">Weather Monitoring App</h1>\n      <form onSubmit={handleSubmit} className=\"search\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter city\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n          className=\"search-input\"\n        />\n        <button type=\"submit\" className=\"search-button\">Search</button>\n      </form>\n\n      {error && <div className=\"error\">{error}</div>}\n\n      {currentWeather && (\n        <div className=\"current-weather\">\n          <h2>{currentWeather.location.name}</h2>\n          <p>Temperature: {currentWeather.current.temp_c}°C</p>\n          <p>Weather: {currentWeather.current.condition.text}</p>\n        </div>\n      )}\n\n      {forecastData.length > 0 && (\n        <div className=\"forecast\">\n          <h2>7-Day Forecast</h2>\n          <Line data={getChartData()} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}